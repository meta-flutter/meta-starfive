From 450ae84e3fde598c3246a8c2cff372ffa13b98bb Mon Sep 17 00:00:00 2001
From: "max.ma" <max.ma@starfivetech.com>
Date: Mon, 10 Jan 2022 19:19:33 -0800
Subject: [PATCH 11/24] set default march to rv64imafcd_zba_zbb_zbc_zbs and
 mabi to lp64d

---
 clang/lib/Driver/ToolChains/Arch/RISCV.cpp | 33 +++++++++++++---------
 1 file changed, 19 insertions(+), 14 deletions(-)

diff --git a/clang/lib/Driver/ToolChains/Arch/RISCV.cpp b/clang/lib/Driver/ToolChains/Arch/RISCV.cpp
index 68512c81b08e..ee3b69552437 100644
--- a/clang/lib/Driver/ToolChains/Arch/RISCV.cpp
+++ b/clang/lib/Driver/ToolChains/Arch/RISCV.cpp
@@ -116,7 +116,7 @@ static bool getExtensionVersion(const Driver &D, const ArgList &Args,
 
   // If experimental extension, require use of current version number number
   if (auto ExperimentalExtension = isExperimentalExtension(Ext)) {
-    if (Ext == "b" || Ext == "zba" || Ext == "zba" || Ext == "zbc"
+    if (Ext == "b" || Ext == "zba" || Ext == "zbb" || Ext == "zbc"
         || Ext == "zbs" || Ext == "v")
     {
       // ignore b extension and v extension version number and ignore 
@@ -626,11 +626,13 @@ StringRef riscv::getRISCVABI(const ArgList &Args, const llvm::Triple &Triple) {
       return "ilp32";
   } else if (MArch.startswith_insensitive("rv64")) {
     // FIXME: parse `March` to find `D` extension properly
-    if (MArch.substr(4).contains_insensitive("d") ||
-        MArch.startswith_insensitive("rv64g"))
-      return "lp64d";
-    else
-      return "lp64";
+    //if (MArch.substr(4).contains_insensitive("d") ||
+    //    MArch.startswith_insensitive("rv64g"))
+    //  return "lp64d";
+    //else
+    //  return "lp64";
+    // align the default abi with gcc toolchain of dubhe
+    return "lp64d";  
   }
 
   // 3. Choose a default based on the triple
@@ -644,10 +646,11 @@ StringRef riscv::getRISCVABI(const ArgList &Args, const llvm::Triple &Triple) {
     else
       return "ilp32d";
   } else {
-    if (Triple.getOS() == llvm::Triple::UnknownOS)
-      return "lp64";
-    else
-      return "lp64d";
+    //if (Triple.getOS() == llvm::Triple::UnknownOS)
+    //  return "lp64";
+    //else
+    //  return "lp64d";
+    return "lp64d";
   }
 }
 
@@ -722,9 +725,11 @@ StringRef riscv::getRISCVArch(const llvm::opt::ArgList &Args,
     else
       return "rv32imafdc";
   } else {
-    if (Triple.getOS() == llvm::Triple::UnknownOS)
-      return "rv64imac";
-    else
-      return "rv64imafdc";
+    //if (Triple.getOS() == llvm::Triple::UnknownOS)
+    //  return "rv64imac";
+    //else
+    //  return "rv64imafdc";
+    // align the default march with gcc toolchain of dubhe
+    return "rv64imafdc_zba_zbb_zbc_zbs";  
   }
 }
-- 
2.33.1

