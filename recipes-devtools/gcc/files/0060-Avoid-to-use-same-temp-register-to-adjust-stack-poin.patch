From 37e9e5efeda593e0ff594105c83da67d2d2832e5 Mon Sep 17 00:00:00 2001
From: Monk Chiang <monk.chiang@sifive.com>
Date: Fri, 22 Jan 2021 15:49:37 +0800
Subject: [PATCH 60/60] Avoid to use same temp register to adjust stack
 pointer.

---
 gcc/config/riscv/riscv.c                      |  2 +-
 .../g++.target/riscv/rvv-large-stack.C        | 26 +++++++++++++++++++
 2 files changed, 27 insertions(+), 1 deletion(-)
 create mode 100644 gcc/testsuite/g++.target/riscv/rvv-large-stack.C

diff --git a/gcc/config/riscv/riscv.c b/gcc/config/riscv/riscv.c
index d3da49c9d72..0bbeeb51f2f 100644
--- a/gcc/config/riscv/riscv.c
+++ b/gcc/config/riscv/riscv.c
@@ -4617,7 +4617,7 @@ riscv_gen_load_poly_int (rtx target, rtx tmp1, rtx tmp2, poly_int64 value)
 	return gen_add3_insn (target, target, GEN_INT (scalar_offset));
       else
 	{
-	  rtx remainder = riscv_add_offset (target, target, scalar_offset);
+	  rtx remainder = riscv_add_offset (tmp2, target, scalar_offset);
 	  return gen_rtx_SET (target, remainder);
 	}
     }
diff --git a/gcc/testsuite/g++.target/riscv/rvv-large-stack.C b/gcc/testsuite/g++.target/riscv/rvv-large-stack.C
new file mode 100644
index 00000000000..43a086c0e16
--- /dev/null
+++ b/gcc/testsuite/g++.target/riscv/rvv-large-stack.C
@@ -0,0 +1,26 @@
+/* { dg-do compile } */
+/* { dg-options "-O0 -march=rv64gcv -mabi=lp64d" } */
+
+#include <riscv_vector.h>
+#include <random>
+
+__attribute__((noinline)) void NestedFunc(vbool32_t a, vbool32_t b) {
+  return;
+}
+
+__attribute__((noinline)) void Crash() {
+  std::mt19937 rng;
+  const vuint32m1_t v0 = vmv_v_x_u32m1(0);
+  const vbool32_t mask = vmseq_vv_u32m1_b32(v0, v0);
+  NestedFunc(mask, mask);
+}
+
+int main() {
+  Crash();
+  return 0;
+}
+
+/* { dg-final { scan-assembler "mul\tt0,t0,t2" } } */
+/* { dg-final { scan-assembler "li\tt2,-4096" } } */
+/* { dg-final { scan-assembler "add\tt2,t2,t0" } } */
+/* { dg-final { scan-assembler "addi\tt0,t2,1552" } } */
-- 
2.25.1

